{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "encounter difficulty calculator.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPNp6JV93EvOv0LqZtTzyAi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Macavitymadcap/colabstuff/blob/main/encounter_difficulty_calculator.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GP-G11vVQzB3"
      },
      "source": [
        "import pandas as pd\r\n",
        "\r\n",
        "xp_thresholds = {\r\n",
        "    \"easy\": [25, 50, 75, 125, 250, 300, 350, 450, 550, 600, 800, 1000, 1100, 1250, 1400, 1600, 2000, 2100, 2400, 2800],\r\n",
        "    \"medium\": [50, 100, 150, 250, 500, 600, 750, 900, 1100, 1200, 1600, 2000, 2200, 2500, 2800, 3200, 3900, 4200, 4900, 5700],\r\n",
        "    \"hard\": [75, 150, 225, 375, 750, 900, 1100, 1400, 1600, 1900, 2400, 3000, 3400, 3800, 4300, 4800, 5900, 6300, 7300, 8500],\r\n",
        "    \"deadly\": [100, 200, 400, 500, 1100, 1400, 1700, 2100, 2400, 2800, 3600, 4500, 5100, 5700, 6400, 7200, 8800, 9500, 10900, 12700]\r\n",
        "}\r\n",
        "xp_df = pd.DataFrame(xp_thresholds, index=[num + 1 for num in range(20)])\r\n",
        "xp_df.index.name = \"Level\"\r\n",
        "\r\n",
        "xp_by_cr = {\r\n",
        "    \"XP\": [10, 25, 50, 100, 200, 450, 700, 1100, 1800, 2300, 2900, 3900, 5000, 5900, 7200, 8400, 10000, 11500, 13000, 15000, 18000, 20000, 22000, 25000, 33000, 41000, 50000, 62000, 75000, 90000, 105000, 120000, 135000, 155000]\r\n",
        "}\r\n",
        "xp_cr_df = pd.DataFrame(xp_by_cr, index=[\"0\", \"1/8\", \"1/4\", \"1/2\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"])\r\n",
        "xp_cr_df.index.name = \"CR\"\r\n",
        "\r\n",
        "mult_fewer_three = {\r\n",
        "    \"multiplier\": [1.5, 2, 2.5, 2.5, 2.5, 2.5, 3, 3, 3, 3, 4, 4, 4, 4, 5]\r\n",
        "}\r\n",
        "fewer_three_df = pd.DataFrame(mult_fewer_three, index=[num + 1 for num in range(15)])\r\n",
        "fewer_three_df.index.name = \"num monsters\"\r\n",
        "\r\n",
        "mult_three_five = {\r\n",
        "    \"multiplier\": [1, 1.5, 2, 2, 2, 2, 2.5, 2.5, 2.5, 2.5, 3, 3, 3, 3, 4]\r\n",
        "}\r\n",
        "three_five_df = pd.DataFrame(mult_three_five, index=[num + 1 for num in range(15)])\r\n",
        "three_five_df.index.name = \"num monsters\"\r\n",
        "\r\n",
        "mult_six_plus = {\r\n",
        "    \"multiplier\": [0.5, 1, 1.5, 1.5, 1.5, 1.5, 2, 2, 2, 2, 2.5, 2.5, 2.5, 2.5, 3]\r\n",
        "}\r\n",
        "six_plus_df = pd.DataFrame(mult_six_plus, index=[num + 1 for num in range(15)])\r\n",
        "six_plus_df.index.name = \"num monsters\"\r\n",
        "\r\n",
        "def calculate_difficulty():\r\n",
        "  num_pcs = input(\"How many PCs? \")\r\n",
        "  pcs = int(num_pcs)\r\n",
        "  levels = []\r\n",
        "  for num in range(pcs):\r\n",
        "    pc_level = input(f\"  Player {num+1}'s level? \")\r\n",
        "    level = int(pc_level)\r\n",
        "    levels.append(level)\r\n",
        "  easy, medium, hard, deadly = 0, 0, 0, 0\r\n",
        "  for i in levels:\r\n",
        "    easy += xp_df.at[i, \"easy\"]\r\n",
        "    medium += xp_df.at[i, \"medium\"]\r\n",
        "    hard += xp_df.at[i, \"hard\"]\r\n",
        "    deadly += xp_df.at[i, \"deadly\"]\r\n",
        "  print(\"\")\r\n",
        "  num_monsters = input(\"How many monsters? \")\r\n",
        "  monsters = int(num_monsters)\r\n",
        "  total_xp, modified_xp = 0, 0\r\n",
        "  for num in range(monsters):\r\n",
        "    monster_cr = input(f\"  Monster {num+1}'s CR? \")\r\n",
        "    xp = int(xp_cr_df.at[monster_cr, \"XP\"])\r\n",
        "    total_xp += xp\r\n",
        "  if monsters <= 15:\r\n",
        "    if pcs < 3:\r\n",
        "      modified_xp = total_xp * fewer_three_df.at[monsters, \"multiplier\"]\r\n",
        "    elif pcs >= 3 and pcs <= 5:\r\n",
        "      modified_xp = total_xp * three_five_df.at[monsters, \"multiplier\"]\r\n",
        "    else:\r\n",
        "      modified_xp = total_xp * six_plus_df.at[monsters, \"multiplier\"]\r\n",
        "  else:\r\n",
        "    if pcs < 3:\r\n",
        "      modified_xp = total_xp * fewer_three_df.at[15, \"multiplier\"]\r\n",
        "    elif pcs >= 3 and pcs > 5:\r\n",
        "      modified_xp = total_xp * three_five_df.at[15, \"multiplier\"]\r\n",
        "    else:\r\n",
        "      modified_xp = total_xp * six_plus_df.at[15, \"multiplier\"]\r\n",
        "  mod_xp = int(modified_xp)\r\n",
        "  print(\"\")\r\n",
        "  if mod_xp < medium:\r\n",
        "    print(f\"Encounter Difficulty: Easy\\n  Total XP: {total_xp}\\n  Modifed XP: {mod_xp}\\n  XP per Player: {int(total_xp / pcs)}\")\r\n",
        "  elif mod_xp >= medium and mod_xp < hard:\r\n",
        "    print(f\"Encounter Difficulty: Medium\\n  Total XP: {total_xp}\\n  Modifed XP: {mod_xp}\\n  XP per Player: {int(total_xp / pcs)}\")\r\n",
        "  elif mod_xp >= hard and mod_xp < deadly:\r\n",
        "    print(f\"Encounter Difficulty: Hard\\n  Total XP: {total_xp}\\n  Modifed XP: {mod_xp}\\n  XP per Player: {int(total_xp / pcs)}\")\r\n",
        "  elif mod_xp >= deadly:\r\n",
        "    print(f\"Encounter Difficulty: Deadly\\n  Total XP: {total_xp}\\n  Modifed XP: {mod_xp}\\n  XP per Player: {int(total_xp / pcs)}\")\r\n",
        "  print(\"\")\r\n",
        "  yesno = [\"yes\", \"no\"]\r\n",
        "  res = \"\"\r\n",
        "  while res not in yesno:\r\n",
        "    res = input(\"Calculate another encounter? \").lower()\r\n",
        "    if res == \"yes\":\r\n",
        "      print(\"\")\r\n",
        "      calculate_difficulty()\r\n",
        "    elif res == \"no\":\r\n",
        "      return\r\n",
        "    else:\r\n",
        "      print(\"Type 'yes' or 'no'.\")\r\n",
        "\r\n",
        "calculate_difficulty()\r\n"
      ],
      "execution_count": 13,
      "outputs": []
    }
  ]
}